I"á3<p>Basically, Tumblr auto-generates Facebook Open Graph and/or Twitter Card markups to your blogs without a clear mechanism. I found that some of my Tumblr blog posts including the markups, but some of them not. Indeed, we have a lack of control over what kind of information to be auto-tagged. The Tumblr crawler may also pick up incorrect contents, especially og:type and og:image. You can use <a href="https://developers.facebook.com/tools/debug/og/object/">Facebook‚Äôs Open Graph Object Debugger</a> to inspect the tags of your posts.</p>

<!--more-->

<p><img src="/images/posts/tumblr/Tumblr-Facebook-OpenGraph-Tags-Block.png" alt="Example Facebook Open Graph tags auto-generated in the Tumblr blog" /></p>

<p><small>Fig. Sample of Facebook Open Graph tags auto-generated in the Tumblr blog</small></p>

<p>You may want to fix the tags, so you explicitly define your own in your Custom Theme. Tumblr will stop auto-generate the entire markup, once you add an Open Graph meta tags. Therefore, you need to reengineer those by your own codes. Here is an example found on GitHub gists:</p>

<script src="https://gist.github.com/JuanitoFatas/4744199.js"></script>

<p>You can refer the documentation <a href="https://www.tumblr.com/docs/hk/custom_themes">‚ÄúCreating a custom Tumblr HTML theme‚Äù</a> for more details and study the custom theme variables. One big challenge is how to set an og:image tag, since only some types of posts, such as Photo and Audio, possesses a variable tag for obtaining the URL of the post images. Most other post types do not have a way to access the image resources contained within the post objects. For example, only <code class="highlighter-rouge">{Title}</code> and <code class="highlighter-rouge">{Body}</code> variables are available for describing Text posts. This causes a big problem to me because I use Text posts as the primary type of my blog articles.</p>

<p>To workaround, I figured out a way to map between each post and an external image source. Each Tumblr post has a unique identifier called <code class="highlighter-rouge">{PostID}</code>, so I used this variable to look up the corresponding file located in my own cloud storage.</p>

<p>The following cloud services are some possible choices for static web hosting:</p>

<ul>
  <li>Google Cloud Storage</li>
  <li>Amazon S3</li>
  <li>GitHub Page</li>
</ul>

<p>The traffic of my Tumblr blogs is subtle. So, I chose to host on a GitHub Page, as it is entirely free with 1GB storage and a <em>soft</em> bandwidth limit of 100GB per month. This is more than enough for hosting the cover images of all my blog posts. For more details about GitHub Page, please read <a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages">‚ÄúAbout GitHub Pages‚Äù</a> in GitHub Help.</p>

<p><br /></p>

<h2 id="create-a-github-page-for-hosting-your-images">Create a GitHub Page for hosting your images</h2>

<p>In this section, I will demonstrate how to set up a GitHub repository to a GitHub page with a custom domain. First, I suggest you create a new repository. If you have multiple Tumblr blogs, you can distribute their resources to individual repositories or put all files to a single repository with separate folders.</p>

<p>In the <strong>Settings</strong> tab of the new repository, go to <strong>GitHub Pages</strong> section and configure the settings as below:</p>

<ul>
  <li>Source: <code class="highlighter-rouge">master branch</code></li>
  <li>Theme: <em>(Optional) chooses a theme as you like</em></li>
  <li>Custom domain: <em>(Optional) recommends using a subdomain, e.g. <code class="highlighter-rouge">res.example.com</code></em></li>
  <li>Enforce HTTPS: <em>(Optional)</em></li>
</ul>

<p><img src="/images/posts/tumblr/GitHub-Page-Settings.png" alt="Example GitHub Pages configuration" /></p>

<p><small>Fig. Example GitHub Pages configuration</small></p>

<p>If you use a subdomain as the custom domain, add a CNAME record to your DNS server and point it to <code class="highlighter-rouge">&lt;your-github-username&gt;.github.io</code>. Otherwise, the Project Site URL will under the domain <code class="highlighter-rouge">github.io</code>, in the form of <code class="highlighter-rouge">http(s)://&lt;your-github-username&gt;.github.io/&lt;repository-name&gt;/</code>.</p>

<p>Go back to the <strong>Code</strong> tab of the repository, I suggest creating a folder, called <code class="highlighter-rouge">og-images</code> and store all post cover images to it. You can also upload and host your CSS and JavaScript files in the same way.</p>

<p><img src="/images/posts/tumblr/GitHub-Page-Files.png" alt="" /></p>

<p><small>Fig. Example file structure for the GitHub Page</small></p>

<p><br /></p>

<h2 id="add-og-tags-to-your-custom-theme">Add og tags to your Custom Theme</h2>

<p>Log in your Tumblr account and go to edit the HTML code of your theme. Next, add the following code in the HTML head and <strong>replace</strong> <code class="highlighter-rouge">&lt;your-github-page-url&gt;</code> with your GitHub Page URL,</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {block:hidden}
        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"if:OG Tags"</span> <span class="na">content=</span><span class="s">"1"</span> <span class="nt">/&gt;</span>
    {/block:hidden}

    {block:IfOGTags}
        <span class="c">&lt;!-- og --&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:title"</span> <span class="na">content=</span><span class="s">"{block:PostSummary}{PostSummary} - {/block:PostSummary}{block:DayPage}{DayOfMonth} {ShortMonth} - {/block:DayPage}{block:TagPage}#{Tag} - {/block:TagPage}{block:SearchPage}{SearchQuery} - {/block:SearchPage}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:site_name"</span> <span class="na">content=</span><span class="s">"{title}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:locale"</span> <span class="na">content=</span><span class="s">"zh_HK"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:locale:alternate"</span> <span class="na">content=</span><span class="s">"zh_tw"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:locale:alternate"</span> <span class="na">content=</span><span class="s">"en_US"</span> <span class="nt">/&gt;</span>
        {block:Description}
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:description"</span> <span class="na">content=</span><span class="s">"{MetaDescription}"</span> <span class="nt">/&gt;</span>
        {/block:Description}
        {block:IndexPage}
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:type"</span> <span class="na">content=</span><span class="s">"website"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:url"</span> <span class="na">content=</span><span class="s">"{URL}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"{PortraitURL-128}"</span><span class="nt">/&gt;</span>
        {/block:IndexPage}
        {block:PermalinkPage}
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:type"</span> <span class="na">content=</span><span class="s">"article"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:url"</span> <span class="na">content=</span><span class="s">"{Permalink}"</span> <span class="nt">/&gt;</span>
            {block:Posts}
                {block:Text}
                    <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"https://&lt;your-github-page-url&gt;/og-images/{PostID}.png"</span><span class="nt">/&gt;</span>
                {/block:Text}
                {block:Photo}
                    <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"{PhotoURL-500}"</span><span class="nt">/&gt;</span>
                {/block:Photo}
                {block:Photoset}
                    {block:Photos}
                        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"{PhotoURL-500}"</span><span class="nt">/&gt;</span>
                    {/block:Photos}
                {/block:Photoset}
                {block:Link}
                    {block:Thumbnail}
                        <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"{Thumbnail}"</span><span class="nt">/&gt;</span>
                    {/block:Thumbnail}
                {/block:Link}
                {block:Video}
                    {block:Caption}<span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:description"</span> <span class="na">content=</span><span class="s">"{PlaintextCaption}"</span><span class="nt">/&gt;</span>{/block:Caption}
                    {block:VideoThumbnail}
                                <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:image"</span> <span class="na">content=</span><span class="s">"{VideoThumbnailURL}"</span><span class="nt">/&gt;</span>
                    {/block:VideoThumbnail}
                {/block:Video}
            {/block:Posts}
        {/block:PermalinkPage}
    {/block:IfOGTags}
</code></pre></div></div>
<p>Please replace the <code class="highlighter-rouge">og:locale</code> tags with your languages, you can find the choices from <a href="https://kb.yoast.com/kb/changing-the-og-locale-output/">Yoast SEO‚Äôs Knowledge Base</a></p>

<p>The above code specifies the <code class="highlighter-rouge">og:image</code> of all Text posts to point at <strong><code class="highlighter-rouge">https://&lt;your-github-page-url&gt;/og-images/{PostID}.png</code></strong>. For example:</p>
<ul>
  <li><code class="highlighter-rouge">https://res.example.com/og-images/1234.png</code> <em>(with a custom domain)</em>, or</li>
  <li><code class="highlighter-rouge">https://john.github.io/repository-abc/og-images/1234.png</code> <em>(without custom domain)</em></li>
</ul>

<p>So, you must upload an image to the same path. Otherwise, this will cause a <em>File Not Found Error</em>.</p>

<p><br /></p>

<h2 id="format-and-upload-images-to-github-repository">Format and Upload images to GitHub repository</h2>

<p>To correctly link between each post and its Open Graph image, you must store each image file with a proper filename to the GitHub repository. I suggest you follow the procedure below,</p>

<ol>
  <li>
    <p>Carefully copy the <strong><code class="highlighter-rouge">{PostID}</code></strong> of each post and use it to rename its corresponding file.<br />* You can find the <code class="highlighter-rouge">{PostID}</code> from a post URL,<br />e.g. <code class="highlighter-rouge">https://example.tumblr.com/post/{PostID}/......</code>.</p>
  </li>
  <li>
    <p>Convert all image files to PNG format and name them with <strong>.png</strong> extension.<br />* This ensures that all the images will be renamed with the same format, i.e. <strong><code class="highlighter-rouge">{PostID}</code></strong>.png.</p>
  </li>
  <li>
    <p>Use a Git tool to commit and push the files to the GitHub repository.</p>
  </li>
  <li>
    <p>Finally, use <a href="https://developers.facebook.com/tools/debug/og/object/">Facebook‚Äôs Open Graph Object Debugger</a> to inspect whether the og:image tag is properly crawled.</p>
  </li>
</ol>

<p><img src="/images/posts/tumblr/GitHub-Page-og-images.png" alt="" /></p>

<p><small>Fig. An <code class="highlighter-rouge">og-images</code> repository uploaded with cover images for Tumblr posts</small></p>

<p>I hope you think this trick is helpful, and share with other Tumblr bloggers. If you have any questions, please feel free to leave a comment below. Also, if you know any better solution, I wish you can share with me.</p>

<hr />

<p><strong>Related project:</strong></p>
<ul>
  <li><i class="fab fa-tumblr-square"></i> <em><a href="https://github.com/chriskyfung/pytumblrtools">Tumblr Quick Tools in Python</a></em> <i class="fab fa-python"></i></li>
</ul>

<p><strong>Related</strong> <a href="/blog/tumblr-tricks/featured-tips-tricks-and-tools-for-tumblr-bloggers">Featured Tips, Tricks, and Tools for Tumblr Bloggers</a></p>
:ET